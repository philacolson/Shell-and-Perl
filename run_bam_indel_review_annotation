#!/bin/sh

DONOR_NAME=$1
DISEASE_CODE=$2
TUMOR_BAM_FILE=$3
NORMAL_BAM_FILE=$4
## DISEASE_NAME=$3 ## e.g. HematopoieticMalignancies
## DONOR_NAME=SJINF004
## DISEASE_CODE=SJINF

ROOT_PATH=/nfs_exports/genomes/1/PCGP/BucketIntermediate
INDEL_PATH=${ROOT_PATH}/${DISEASE_CODE}/IndelAnalysis
BAM_VIEW_SCRIPT=/user/songliu/u2/group/Qiang/Exome/scripts/snp_postprocess/snv_postprocess/TabToExcel.sh


GENE_EXON_DIR=/user/songliu/u2/group/Qiang/Exome/scripts/snp_postprocess/snv_postprocess/GENE_EXON_REGION
## this program builds the coverage for the final data set

TIER1_MUTATION_FILE=${DONOR_NAME}_putative_exon_somatic_indel_mutation.txt
File4CaptureValidation=${DONOR_NAME}_SJ_somatic_indel.txt
GOOD_QUALITY_SOMATIC_INDEL=${DONOR_NAME}_high_quality_indel.lst

NEXTGEN_BIN_ROOT_DIR=/user/songliu/u2/group/Qiang/Exome/scripts/snp_postprocess/snv_postprocess
PERLSRC_DIR=${NEXTGEN_BIN_ROOT_DIR}/perlsrc

FisherTest=${PERLSRC_DIR}/fisherexact


## need to do the export for running FisherTest
export PERL5LIB=${NEXTGEN_BIN_ROOT_DIR}/MikePerl/FishPerl/Text-NSP-1.11



if test ! -d ${INDEL_PATH}
then
  echo "Fail to find indel path ${INDEL_PATH}"
  exit 1
fi
cd ${INDEL_PATH}



## results obtained from the analysis of indels in *bam_low.out file
if test ! -d tempReview_${DONOR_NAME}
then
  echo "Fail to find results obtained from tempReview_${DONOR_NAME}"
  exit 1
fi

cd tempReview_${DONOR_NAME}

## the original copy will be copied over to make sure that the re-run takes the original file
if test -s ${DONOR_NAME}_tumor.txt.original
then
  cp  ${DONOR_NAME}_tumor.txt.original ${DONOR_NAME}_tumor.txt
else
  cp ${DONOR_NAME}_tumor.txt ${DONOR_NAME}_tumor.txt.original
fi

## combine the results from the analysis of low-quality bam file analysis
## there are quite a lot of redundancy in the prior analysis so need to do remove some stuff here
if test -s ${INDEL_PATH}/tempReview_${DONOR_NAME}/${DONOR_NAME}_tumor.txt
then
  awk '{if($11 ==0) print $0}' ${INDEL_PATH}/tempReview_${DONOR_NAME}/${DONOR_NAME}_tumor.txt |sort -u >low_qual_bam_indel.out
  if test -s low_qual_bam_indel.out
  then
    awk '{printf("%s|%s\n", $2, $3)}' low_qual_bam_indel.out |sort -u >low_qual_bam_indel.lst
    for i in `cat low_qual_bam_indel.lst`; do
      echo $i
      chr=`echo $i|cut -f1 -d"|"`
      pos=`echo $i |cut -f2 -d"|"`
      grep "$chr	$pos" ${DONOR_NAME}_tumor.txt >temp.out
      if test ! -s temp.out
      then
        grep "$chr	$pos" low_qual_bam_indel.out |head -n1 >>${DONOR_NAME}_tumor.txt
      fi
    done
  fi
fi

if test ! -s ${DONOR_NAME}_tumor.txt
then
  echo "no output file at tempReview_${DONOR_NAME} generated by autoReview_somatic_indel"
  exit 1
fi

## add coverage to the current indel list
## awk '{if($11==0) print $0}' ${DONOR_NAME}_tumor.txt >${DONOR_NAME}_tumor.txt.clean
## if test ! -s ${DONOR_NAME}_tumor.txt.clean
## then
##   echo "Fail to find any somatic indel for ${DONOR_NAME}_tumor.txt.clean"
##   exit 1
## fi

## make sure that the original is always the original
## mv  ${DONOR_NAME}_tumor.txt.clean ${DONOR_NAME}_tumor.txt

echo "/add_coverage_to_indel4review ${DONOR_NAME} ${DISEASE_CODE} `pwd` ${TUMOR_BAM_FILE} ${NORMAL_BAM_FILE}"
/user/songliu/u2/group/Qiang/Exome/scripts/snp_postprocess/snv_postprocess/add_coverage_to_indel4review ${DONOR_NAME} ${DISEASE_CODE} `pwd` ${TUMOR_BAM_FILE} ${NORMAL_BAM_FILE}

if test ! -s ${DONOR_NAME}_tumor_mod2.txt
then
   echo "Fail to generate  ${DONOR_NAME}_tumor_mod2.txt"
   echo "check add_coverage_to_indel4review ${DONOR_NAME} ${DISEASE_CODE} `pwd` ${TUMOR_BAM_FILE} ${NORMAL_BAM_FILE}"
   exit 1
fi

count=`wc ${DONOR_NAME}_tumor.txt |awk '{printf("%ld", $1)}'`
echo "${DONOR_NAME}: total somatic indel=$count"


## run FISHER's exact test
## col5=AlleleCvg (num. of reads with alternative allele in tumor), col7=PairCvg (num. of reads with alternative allele in normal), col8=TumorCvg, col9=NormalCvg
## this test is fraud for deletion because the coverage for deletion only represent the deleted allele. So it should be $8, $9 instead of $8-$5 and $9 -$7
##
awk '{if($7 == 0) print $0}' ${DONOR_NAME}_tumor_mod2.txt >${DONOR_NAME}_tumor_mod2.txt.clean

## for sites with indel_in_normal >0 && tumor_indel/normal_indel >5, do site\tindel_tumor\tref_tumor\tindel_normal\tref_normal\n
grep -v RepeatSize ${DONOR_NAME}_tumor_mod2.txt |awk '{if($7 > 0 && $5 > 0 && $5/$7 >=5 && $9 >=20 && $7*100/$9 < 5) printf("%s_%s\t%ld\t%ld\t%ld\t%ld\n", $1, $2, $5, $8-$5, $7, $9-$7)}' |awk '{if($3 < 0) printf("%s\t%s\t0\t%s\t%s\n", $1, $2, $4, $5); else print $0}'>input4_fisher_test.out
cat input4_fisher_test.out |${FisherTest} >indel_fisher_output.txt

grep -v RepeatSize ${DONOR_NAME}_tumor_mod2.txt |awk '{if($7 > 0 && $5 > 0 && $5/$7 >=5 && $9 >=20 && $7*100/$9 < 10) printf("%s_%s\t%ld\t%ld\t%ld\t%ld\n", $1, $2, $5, $8-$5, $7, $9-$7)}' |awk '{if($3 < 0) printf("%s\t%s\t0\t%s\t%s\n", $1, $2, $4, $5); else print $0}' >input4_fisher_test2.out
cat input4_fisher_test2.out |${FisherTest} >indel_fisher_output_2.txt

if test -s indel_fisher_output.txt
then
## this may be an unwise approach as 0.5 is a very bad threshold
  awk '{if($1 <0.5) printf("%s\t\n", $2)}' indel_fisher_output.txt>keep_indel.lst
  awk '{if($1 <0.05) printf("%s\t\n", $2)}' indel_fisher_output_2.txt>>keep_indel.lst

  if test -s keep_indel.lst
  then
    sort -u keep_indel.lst >keep_indel.lst.sort
    mv keep_indel.lst.sort keep_indel.lst
## requires <3bp repeat size and also substitute the real call with 0 to avoid being filtered at the next stage. This is a bad practise
    grep -v RepeatSize ${DONOR_NAME}_tumor_mod2.txt |awk '{printf("%s_%s\t", $1, $2); print $0}' |fgrep -f keep_indel.lst |cut -f2-100|awk '{if($4/$3 <3) print $0}' |awk '{for(i=1; i<7; ++i) printf("%s\t", $i); printf("0\t%s\t%s\t%s\n", $8, $9, $10)}' >>${DONOR_NAME}_tumor_mod2.txt.clean
## for things with repeat content, let the next step take care of them. Do not artificially reset 0
    grep -v RepeatSize ${DONOR_NAME}_tumor_mod2.txt |awk '{printf("%s_%s\t", $1, $2); print $0}' |fgrep -f keep_indel.lst |cut -f2-100|awk '{if($4/$3 >=3) print $0}' >>${DONOR_NAME}_tumor_mod2.txt.clean
  fi
fi

if test ! -s ${DONOR_NAME}_tumor_mod2.txt.clean
then
  echo "No somatic indel ${DONOR_NAME}_tumor_mod2.txt.clean"
  exit 1
fi

head -n1 ${DONOR_NAME}_tumor_mod2.txt >${DONOR_NAME}_tumor_mod2.txt.mod
sort -u ${DONOR_NAME}_tumor_mod2.txt.clean >>${DONOR_NAME}_tumor_mod2.txt.mod
rm  ${DONOR_NAME}_tumor_mod2.txt.clean
mv ${DONOR_NAME}_tumor_mod2.txt.mod ${DONOR_NAME}_tumor_mod2.txt

count=`wc ${DONOR_NAME}_tumor_mod2.txt |awk '{printf("%ld", $1)}'`
echo "${DONOR_NAME}: after dbSNP: total somatic indel=$count"


echo "Chr	WU_HG19_Start	WU_HG19_End	ReferenceAllele	MutantAllele	Type	Review	Class	SJQuality	GeneName	mRNA_acc">${File4CaptureValidation}
echo ${DONOR_NAME} >sample.lst
if test -s ${DONOR_NAME}_tumor_mod2.txt
then
  grep -v Pos ${DONOR_NAME}_tumor_mod2.txt |cut -f1 |sort -u >chr.lst
  if test -s chr.lst
  then
    /user/songliu/u2/group/Qiang/Exome/scripts/snp_postprocess/snv_postprocess/find_somatic_germline_mutation `pwd`/sample.lst `pwd`/chr.lst `pwd`/somatic_indel.out `pwd`/germline_indel.out `pwd` no_ME_indel ${GENE_EXON_DIR}
    count=`wc somatic_indel.out|awk '{printf("%ld", $1)}'`
    if test $count -gt 1
    then
      /nfs_exports/apps/internal/scripts/build_indel_annotation_file2 somatic_indel.out ${DONOR_NAME} ${DISEASE_CODE} 1 `pwd`
      if test -s ${DONOR_NAME}_somatic_indel_mutation.txt
      then
        sed /WU_HG18_Pos/s//WU_HG19_Pos/ ${DONOR_NAME}_somatic_indel_mutation.txt >${TIER1_MUTATION_FILE}
        ## mv ${DONOR_NAME}_somatic_indel_mutation.txt  ${TIER1_MUTATION_FILE}
        rm ${DONOR_NAME}_somatic_indel_mutation.txt
      fi
      if test -s ${TIER1_MUTATION_FILE}
      then
##        java -jar /user/songliu/u2/group/Qiang/Exome/scripts/snp_postprocess/snv_postprocess/TabToExcel.jar ${TIER1_MUTATION_FILE}
        ${BAM_VIEW_SCRIPT} -s ${TIER1_MUTATION_FILE} -d ${TUMOR_BAM_FILE} -g ${NORMAL_BAM_FILE} -hg19
        grep -v Chr ${TIER1_MUTATION_FILE} | awk '{type="deletion"; len=length($14)-1; if(index($14, "-")==1) {type="insertion"; len=0;} printf("%s\t%s\t%ld\t%s\t%s\t%s\tS\t%s\t%s\t%s\t%s\n", $4, $5, $5+len, $14, $15, type, $6, $2, $1, $9)}'  |sed /^chr/s///>>${File4CaptureValidation}
      fi
      grep -v Pos somatic_indel.out |cut -f4,5 |sort -u >somatic_indel.lst
      fgrep -f somatic_indel.lst -v ${DONOR_NAME}_indel_tumor.clean >${DONOR_NAME}_indel_tumor.clean.mod
      mv ${DONOR_NAME}_indel_tumor.clean.mod ${DONOR_NAME}_indel_tumor.clean
    else
      echo "No somatic exonic indel for ${DONOR_NAME}"
    fi

## copy the output file to the final results
    if test -s ${DONOR_NAME}_indel_tumor.clean
    then
	echo "Sample	Chr	Pos	IndelSize	RepeatSize	AlleleCvg	UniqCvg	PairCvg	TumorCvg	NormalCvg	Flanking" >${DONOR_NAME}_putative_somatic_indel.txt
        sed /^/s//${DONOR_NAME}"	"/ ${DONOR_NAME}_indel_tumor.clean >>${DONOR_NAME}_putative_somatic_indel.txt
    fi
       
       echo "Gene	Sample	Repeat	Chr	Pos	#Unique	#Indel	#Total	#IndelN	#TotalN" >${DONOR_NAME}_indel_tumor.temp
       sed /^/s//NA\\t${DONOR_NAME}\\t/g ${DONOR_NAME}_indel_tumor.clean |awk '{printf("%s\t%s\t%s\t", $1, $2, $6); printf("%s\t%s\t", $3, $4); for(i=7; i<NF; ++i) printf("%s\t", $i); printf("%s\n", $NF)}' >>${DONOR_NAME}_indel_tumor.temp
       ${NEXTGEN_BIN_ROOT_DIR}/perlsrc/prepare_indel4annotation.pl -i ${DONOR_NAME}_indel_tumor.temp -o validate_somatic_loci.txt -s sub_sum.txt
       rm ${DONOR_NAME}_indel_tumor.temp
       awk '{if($5 >=3 && $9 >=10 && (($3 ==1 && $4/$3 <=5) || $4/$3 <=3)) print $0}' ${DONOR_NAME}_indel_tumor.clean |cut -f1,2 >${GOOD_QUALITY_SOMATIC_INDEL}

       if test -s ${GOOD_QUALITY_SOMATIC_INDEL}
       then
         if test -s sub_sum.txt.mod
         then
           rm sub_sum.txt.mod
         fi
         fgrep -f ${GOOD_QUALITY_SOMATIC_INDEL} -v sub_sum.txt>low_qual_indel.lst
         if test -s low_qual_indel.lst
         then
           sed /^SJHQ/s//SJLQ/ low_qual_indel.lst >sub_sum.txt.mod
         fi
         fgrep -f  ${GOOD_QUALITY_SOMATIC_INDEL} sub_sum.txt>>sub_sum.txt.mod
         mv sub_sum.txt.mod sub_sum.txt
       else
         sed /^SJHQ/s//SJLQ/ sub_sum.txt>sub_sum.txt.mod
         mv sub_sum.txt.mod sub_sum.txt
       fi

       if test -s sub_sum.txt
       then
         grep -v Chr sub_sum.txt |awk '{type="deletion"; len=length($12)-1; if(index($12, "-")==1) {type="insertion"; len=0;} printf("%s\t%s\t%ld\t%s\t%s\t%s\tS\tNotTier1\t%s\tNA\tNA\n", $5, $6, $6+len, $12, $13, type, $1)}' |sed /^chr/s///>>${File4CaptureValidation}
       fi
   fi
fi

