#! /usr/bin/perl
## This program takes the temporary input file generated by generate_TCGA_sequence
## the input file looks like this:
## chr12|6647385|6647405|+ GAGGCCTGGGCCTGGGCCTGG
## chr12|6652738|6652758|+ GGCCAGGTAGGAGCTGTTGGC
## the interval represents the range with 10bp flanking sequence. The remaining residue in the midle ## represents the wild-type allele value
## it also takes the input file of validated mutation in the following format:
## GeneName	Chr	From	To	Wt	MutantAllele1	MutatantAllele2
## ZNF384  12      6647395 6647395 C       C       T       TCGA-02-0114
## ZNF384  12      6652748 6652748 G       A       G       TCGA-02-0114

## it also takes an input for chromosome start position (start with 1) for the genomic contig

## the output file is the real good_SNP.map with the following information
## * SNPname       chr     chrpos  GnPos   PrPos   flanking        Primern
## * LKB1E1_452    chr19   1158176 6379    452     TGCGAAGGAT(C>A)CCCAACGGGG       E1
## * LKB1E1_514    chr19   1158238 6441    514     GCCGGGCCGG(G>T)CCAGTCACGG       E1
## need to look at how to hand this case
## EGFRvalid10     chr7    55216507        164290  exon    CAGCGTGGAC(--------->AACCCCCAC>GGGTTA---)AACCCCCACG
## this was derived from the following content:
## if it is at the same location but with different class, should be made into two entries
## if it is the same location but as different indel size, should be made into two different indels
## EGFR    7       55216506        55216507        -       -       AACCCCCAC       16734
## EGFR    7       55216506        55216507        -       -       GGGTTA  16963


#=============================================
#NOTE NOTE NOTE NOTE NOTE
#strict prevents implicit data definition (eg by typo)
use strict;
#NOTE NOTE NOTE NOTE NOTE
#=============================================



use Getopt::Std;
use Carp;
use File::Basename;
use vars qw/$opt_i $opt_c $opt_v $opt_n $opt_s $opt_o $opt_g $opt_t/;
#getopt('i:c:v:n:s:o:g:t');
# jb: added : to t so that it can take argument
getopt('i:c:v:n:s:o:g:t:');

my $USAGE="$0 takes the following arguement:\n";
$USAGE .="-i input temporary map.out file generated by generate_TCGA_sequence\n";
$USAGE .="-c chromsome start for the genomic contig\n";
$USAGE .="-v validated SNP file\n";
$USAGE .="-n Gene name\n";
$USAGE .="-s list of all samples used in the study\n";
$USAGE .="-o Output good_SNP.map file name\n";
$USAGE .="-g output genotype file name\n";
$USAGE .="-t tag for variation name\n";



print STDERR "opt_i: $opt_i\n";
print STDERR "opt_t: $opt_t\n";
print STDERR "opt_: $opt_v\n";

if(!defined $opt_i ){
  croak $USAGE;
}

if(!defined $opt_c)
{
  croak $USAGE;
}

if( !defined $opt_t)
{
   croak $USAGE;
}
my $VarTag=$opt_t;
my $chr_start=$opt_c;
my $chr_offset = $chr_start-1;

my $FLANKING_BASE_LEN=10;


if(!defined $opt_v)
{
  croak $USAGE;
}

if(!defined $opt_n)
{
  croak $USAGE;
}
my $GeneName=$opt_n;

if(!defined $opt_s)
{
  croak $USAGE;
}

if(!defined $opt_g ){
  croak $USAGE;
}

if(!defined $opt_o ){
  croak $USAGE;
}


## parse the validate file
## GeneName	Chr	From	To	Wt	MutantAllele1	MutatantAllele2
## ZNF384  12      6647395 6647395 C       C       T       TCGA-02-0114
## ZNF384  12      6652748 6652748 G       A       G       TCGA-02-0114
## or in this case
## EGFR    7       55216506        55216507        -       -       AACCCCCAC       16734
## EGFR    7       55216506        55216507        -       -       GGGTTA  16963

open(FN, $opt_v) or die "Fail to open input GSC generated variation file :$opt_v\n";

undef my %genotype_info_list;
while (<FN>) {
  chomp;
  my @items = split "\t", $_;
  if($items[0] eq $GeneName)
  {
    my $start = $items[2];
    my $stop=$items[3];
    my $wt_allele=$items[4];
    my $tumor_allele1=$items[5];
    my $tumor_allele2=$items[6];
    my $max_allele_len = 0;
    my $is_insertion = 0;
    my $snp_type = 0;  ## 0 for substitution, 1=del, 2=ins
    my $allele_size = 0; 
    my $t_allele_size;

    $max_allele_len = get_max_value(length($wt_allele),  length($tumor_allele1));
    $max_allele_len = get_max_value($max_allele_len,  length($tumor_allele2));
    if($wt_allele =~ "\-")  ## wild-type is an insertion
    {
      $is_insertion = 1;
      $start = $stop;
    }
##    printf "is_insertion=%ld: wt=%s\t%ld\t%ld\n", $is_insertion, $wt_allele, $start, $stop;
    $wt_allele = insert_str_with_gap ($wt_allele, $max_allele_len, $is_insertion);
    if($wt_allele =~ "\-")  ## wild-type is an insertion
    {
      $is_insertion = 1;
      $start = $stop;
      $snp_type = 2;
    }
    $tumor_allele1= insert_str_with_gap($tumor_allele1, $max_allele_len, $is_insertion);
    $tumor_allele2= insert_str_with_gap($tumor_allele2, $max_allele_len, $is_insertion);
    if($snp_type != 2)
    {
      if($tumor_allele1 =~ "\-" || $tumor_allele2 =~ "\-")
      {
        $snp_type = 1;
      }
    }
    
    if($snp_type != 0)
    {
      if($is_insertion)  ## insertion will count how many gaps in the wt type
      {
        $allele_size = count_gap_size ($wt_allele, $max_allele_len);
      }
      else
      {
        $allele_size = count_gap_size($tumor_allele1, $max_allele_len);
        $t_allele_size = count_gap_size ($tumor_allele2, $max_allele_len);
        $allele_size = get_max_value ($allele_size, $t_allele_size);
      }
    }
    else
    {
      $allele_size = $max_allele_len;
    }



    my $sample=$items[7];
    if(!defined $genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample})
    {
      $genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample}{"wt"}=$wt_allele;
      $genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample}{$tumor_allele1}=1;
      if(!defined $genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample}{$tumor_allele2})
      {
        $genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample}{$tumor_allele2}=1;
      }
      else
      {
        $genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample}{$tumor_allele2}+=1;
      }

    }
    else
    {
      if(!defined $genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample}{$tumor_allele1})
      {
        $genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample}{$tumor_allele1}=1;
      }
      else
      {
        $genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample}{$tumor_allele1}+=1;
      }
      if(!defined $genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample}{$tumor_allele2})
      {
        $genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample}{$tumor_allele2}=1;
      }
      else
      {
        $genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample}{$tumor_allele2}+=1;
      }
    }
  }
}
close (FN);

undef my %all_sample_list;
open(FN, $opt_s) or die "Fail to open input file created by :$opt_s\n";
while (<FN>) {
  chomp;
  $all_sample_list{$_} = 0;
}
close(FN);


sub insert_str_with_gap {
  my ($char_val, $char_count, $append_at_end) = @_;
  my $t_str_len;
  my $new_str;
  
  if(length($char_val) < $char_count)
  {
    $new_str = $char_val;
    for(my $j =length($char_val); $j < $char_count; ++$j)
    { 
      if($append_at_end)
      {
        $new_str .= "-";
      }
      else
      {
        $new_str = "-". $new_str;
      }
    }
    return $new_str;
  }
  else
  {
    return $char_val;
  }
}

sub count_gap_size {
  my  ($allele_val, $allele_size) = @_;
  my $indel_size = 0;

  for(my $i = 0; $i<$allele_size; ++$i)
  {
       if(substr($allele_val, $i, 1) eq "\-")
       {
         $indel_size +=1;
       }
  }
  return $indel_size;
}

sub get_max_value {
   my ($val1, $val2) = @_;

  if($val1 >= $val2)
  {
    return $val1;
  }
  else
  {
    return $val2;
  }
}




## parse the temp.out file created by generate_TCGA_sequence
## chr12|6647385|6647405|+ GAGGCCTGGGCCTGGGCCTGG
## chr12|6652738|6652758|+ GGCCAGGTAGGAGCTGTTGGC
## the interval represents the range with 10bp flanking sequence. The remaining residue in the midle ## represents the wild-type allele value
print STDERR "about to open input file $opt_i\n";
open(FN, $opt_i) or die "Fail to open input file created by :$opt_i\n";

my $SNP_index=0;
undef my %snp_info_list;
undef my %mutant_allele_list;
undef my %current_genotype_list;
open(FO, "> $opt_o") or die "Cannot open the output file:$opt_o\n";
## print the title line
print FO "SNPname\tchr\tchrpos\tGnPos\tPrPos\tflanking\tPrimer\n";
print "print to output file: SNPname\tchr\tchrpos\tGnPos\tPrPos\tflanking\tPrimer\n";
open(FG, "> $opt_g") or die "Cannot open the output genotype file:$opt_g\n";
## print the title line
print FG "SNPname\tSampleName\tAllele1\tAllele2\tQuality\n";
while (<FN>) {
  chomp;
  my @items = split "\t", $_;
  my @t_items= split '\|', $items[0];
  my $chr=$t_items[0];
  my $chr_from=$t_items[1] + $FLANKING_BASE_LEN; ## for an insertion represented as 13-14, take 13-9 as the leftmost and 14+9 as the right most site
  my $chr_to=$t_items[2] - $FLANKING_BASE_LEN;
  if($chr_from > $chr_to)	## adjust for the from-to changes for an insertion
  {
    $chr_to = $chr_from;
  }
  my $left_flanking = substr($items[1], 0, $FLANKING_BASE_LEN);
  my $str_length=length($items[1]);

## right_flanking is counting from the rightmost-base - flanking total
  my $right_flanking = substr($items[1], $str_length-$FLANKING_BASE_LEN, $FLANKING_BASE_LEN);
  my $wt_allele = substr($items[1], $FLANKING_BASE_LEN,  $str_length-$FLANKING_BASE_LEN-$FLANKING_BASE_LEN);


  foreach my $snp_type (keys %genotype_info_list)
  {
    foreach my $allele_size (keys %{$genotype_info_list{$snp_type}})
    {
      my $find = 0;
      %mutant_allele_list=();
      %current_genotype_list=();
      foreach my $start (keys %{$genotype_info_list{$snp_type}{$allele_size}})
      {
        if($start == $chr_from)
        {
          foreach my $stop (keys %{$genotype_info_list{$snp_type}{$allele_size}{$start}})
          {
            if($stop == $chr_to)
            {
              foreach my $sample (keys %{$genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}})
              {
## make sure that each sample only has two alleles maximum. This includes the wild-type allele
                my $allele_count=0;
                my $max_allele_len=$allele_size;
                my $is_insertion = ($snp_type == 2);
             
                if($is_insertion == 1) 
                {
                  if($chr_from < $chr_to)
                  {
                    $left_flanking = substr($items[1], $chr_to-$chr_from, $FLANKING_BASE_LEN);
                    $chr_from = $chr_to;
                  }
                  $wt_allele = $genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample}{"wt"};
                }
                if($genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample}{"wt"} eq $wt_allele)
                {
                  foreach my $allele (keys %{$genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample}})
                  {
                    if($allele ne "wt")
                    {
                      if($is_insertion == 1 && $allele =~ "\-")
                      {
                        $allele = $wt_allele;
                      }

                      if($allele ne $wt_allele)
                      {
                        $mutant_allele_list{$allele} = 1;
                        $find=1;
                      }
                      if(!defined $current_genotype_list{$sample}{allele1})
                      {
                        $current_genotype_list{$sample}{allele1}=$allele;
                      }
                      else
                      {
                        $current_genotype_list{$sample}{allele2}=$allele;
                      }
                      $allele_count+=1;
                    }
                  }
                  if($allele_count >2 || $allele_count == 0)
                  {
                    printf "sample=$sample, chr_start=$chr_start, wild_type=%s, total_allele_count=$allele_count\n", $genotype_info_list{$snp_type}{$allele_size}{$start}{$stop}{$sample}{"wt"};
                    exit 1;
                  }
                  elsif($allele_count == 1)
                  {
                    $current_genotype_list{$sample}{allele2}=$current_genotype_list{$sample}{allele1};
                  }
                }
                else
                {
                  printf "sample=$sample, wild_type=%s, do not match $wt_allele\n", $genotype_info_list{$start}{$stop}{$sample}{"wt"};
                  exit 1;
                }
              }
            }
          }
        }
      }

## store all the results in *_snp_info and genotype2trace
      if($find == 1)
      {
      $SNP_index +=1;
      my $allele_var_str=$wt_allele;
      foreach my $allele (keys %mutant_allele_list)
      {
        $allele_var_str = $allele_var_str.">".$allele;
      }
      my $genomic_seq_start=$chr_from-$chr_offset;
      my $SNPName=$GeneName.$VarTag.$SNP_index;
      if($snp_type == 1 || $snp_type == 0)  ## this is a deletion or a sub
      {
        $right_flanking = substr($items[1], $FLANKING_BASE_LEN+$allele_size, $FLANKING_BASE_LEN);
      }
      else  ## insertion
      {
        $right_flanking = substr($items[1], $FLANKING_BASE_LEN, $FLANKING_BASE_LEN);
      }
      print FO "$SNPName\t$chr\t$chr_from\t$genomic_seq_start\t777\t$left_flanking($allele_var_str)$right_flanking\tX\n";
      print "print to output file: $SNPName\t$chr\t$chr_from\t$genomic_seq_start\t777\t$left_flanking($allele_var_str)$right_flanking\tX\n";
      foreach my $sample (keys %all_sample_list)
      {
        $all_sample_list{$sample} = 0;
      }
      foreach my $sample (keys %current_genotype_list)
      {
        if($current_genotype_list{$sample}{allele2} eq $wt_allele)
        {
          printf FG "$SNPName\t$sample\t%s\t%s\t6\n", $current_genotype_list{$sample}{allele2}, $current_genotype_list{$sample}{allele1};
        }
        else
        {
          printf FG "$SNPName\t$sample\t%s\t%s\t6\n", $current_genotype_list{$sample}{allele1}, $current_genotype_list{$sample}{allele2};
        }
        $all_sample_list{$sample} = 1;
      }
      foreach my $sample (keys %all_sample_list)
      {
        if($all_sample_list{$sample} == 0)
        {
          printf FG "$SNPName\t$sample\t%s\t%s\t6\n", $wt_allele, $wt_allele;
        }
      }
     }
    }
   }

}
close(FN);
close (FO);
close(FG);
