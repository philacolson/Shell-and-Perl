#!/bin/sh

## this script tries to incorporate the changes in COSMIC back to TCGA data
## need to convert the file format of 

GENE_NAME=$1
PROJECT_DIR=$2
PROJECT_NAME=$3
ALL_SAMPLE_LIST=$4
GSC_GENOTYPE=$5
Valid_Tag=$6  ## use valid for valid SNP
## ALL_SAMPLE_LIST=/lpg_work/TCGA/TCGAGSC_GBM_Valid/all_sample.lst
## GSC_GENOTYPE=/lpg_work/TCGA/TCGAGSC_GBM_Valid/validate_somatic_loci.txt  ## this should be one of the parameters of this pipeline

NEXTGEN_BIN_ROOT_DIR=/user/songliu/u2/group/Qiang/Exome/scripts/snp_postprocess/snv_postprocess

PERLSRC=${NEXTGEN_BIN_ROOT_DIR}/perlsrc
FIND_SUB=${PERLSRC}/FindSub.pl
BuildSNP2Gene=${PERLSRC}/build_SNP2gene.pl
FindBestSNPClass=${PERLSRC}/find_best_snp_rank.pl
CVT_VARPOS=${PERLSRC}/cvt_varpos4GSC.pl
ADD_GENOTYPE_LABEL=${PERLSRC}/add_genotype_label.pl
COPY_ENT_SCRIPT=${PERLSRC}/create_ent_dir4gi.pl

REFSEQ_GI_DIR=${NEXTGEN_BIN_ROOT_DIR}/nextgensupport2/NCBI/RefSeq


BIN_DIR=${NEXTGEN_BIN_ROOT_DIR}/SNPdetector/LINUX/src

PREP_SEQ=${BIN_DIR}/prep_Seq

## files related to annotation
DB_FILE=${PROJECT_DIR}/human_db.lst
REP_FILE=${PROJECT_DIR}/humrep.fsa
CONFIG_DIR=${PROJECT_DIR}/config
GENE_EXON_GI_REGION=${NEXTGEN_BIN_ROOT_DIR}/GENE_EXON_GI_REGION

ADD_SNP2GENOMIC=${BIN_DIR}/add_SNP2Seq
SNP2AA_PROG=${BIN_DIR}/SNP2AA
BUILD_PROTEIN_GI_MAP=${BIN_DIR}/build_mRNA_protein_lookup
##SNP2AA_PROG=/nfs_exports/linux-file1/home/naevegrp/jzhang2/NextGen/SNPdetector/LINUX/new_src/SNP2AA
## BUILD_PROTEIN_GI_MAP=/nfs_exports/linux-file1/home/naevegrp/jzhang2/NextGen/SNPdetector/LINUX/new_src/build_mRNA_protein_lookup
STRIP_LINE_PROG=${BIN_DIR}/strip_line
WR_FETCH_PROG=${BIN_DIR}/write_fetch_file
TSIM_PROG=${BIN_DIR}/tsim
COPY_FEATURE_PROG=${BIN_DIR}/copy_feature
PRT_BLAST_ID_PROG=${BIN_DIR}/prt_blast_id
PRT_CHMAP_ID_PROG=${BIN_DIR}/prt_chmap_id
FIND_BEST_HIT_PROG=${BIN_DIR}/find_best_hit
DEL_SNP_PROG=${BIN_DIR}/repack_feature
DEL_ALIGN_PROG=${BIN_DIR}/repack_align
ATTATCH_ENT=${BIN_DIR}/attatch_ent
ASN2FF=${BIN_DIR}/asn2fast
FORMAT_DB=${BIN_DIR}/formatdb

## a temporary file for recording protein_GI/mRNA_acc mapping
CDS_GI_ACC_MAPPING=cds_gi_acc_mapping.txt



if test ! -d ${PROJECT_DIR}
then
  echo "Fail to find the direcotry ${PROJECT_DIR}"
  exit 1
fi

if test ! -s ${GSC_GENOTYPE}
then
  echo "Fail to find the genotype file ${GSC_GENOTYPE}"
  exit 1
fi

if test ! -s ${ALL_SAMPLE_LIST}
then
  echo "Fail to find the sample file ${ALL_SAMPLE_LIST}"
  exit 1
fi

if test ! -d ${PROJECT_DIR}/${GENE_NAME}
then
  echo "Fail to find directory ${PROJECT_DIR}/${GENE_NAME}"
  exit 1
fi


cd ${PROJECT_DIR}/${GENE_NAME}

if test ! -s ${GENE_NAME}.seq
then
  echo "Fail to find fasta sequence file ${GENE_NAME}.seq"
  exit 1
fi


## run the program prep_Seq
rm *.ent
if test ! -s  ${GENE_NAME}.ent
then
  rm prep_Seq.err
  ## copy the configurations to all individual gene-based directories
  if test ! -s ${DB_FILE}
  then
    echo "Fail to find the blast db file ${DB_FILE}"
    exit 1
  fi

  if test ! -s ${REP_FILE}
  then
    echo "Fail to find the repetitive sequence file ${REP_FILE}"
    exit 1
  fi

  if test ! -d ${CONFIG_DIR}
  then
    echo "Fail to find the configuration dir ${CONFIG_DIR}"
    exit 1
  fi

  if test ! -s ${CONFIG_DIR}/same.powblastrc
  then
    echo "Fail to find the configuration file ${CONFIG_DIR}/same.powblastrc"
    exit 1
  fi

  find_mRNA=0
  CHR=`grep ">" ${GENE_NAME}.seq | cut -f2 -d"=" |cut -f1 -d":"`
  echo ${CHR}
  echo ${GENE_EXON_GI_REGION}/${CHR}_region.txt
  if test -s ${GENE_EXON_GI_REGION}/${CHR}_region.txt
  then
## obtain the refseq gi number from the chromosomal coordinates
   echo ${GENE_NAME} >t.lst
   ${FIND_SUB} -i ${GENE_EXON_GI_REGION}/${CHR}_region.txt -c t.lst -t 1 -d '\t' -n 0 -o t.lst.out
   if test -s t.lst.out
   then
     cut -f 3 t.lst.out |sort -u >gi.lst
     if test -s gi.lst
     then
## copy the gi.ent files to local direcotry
       ${COPY_ENT_SCRIPT} -i ${REFSEQ_GI_DIR}/refseq_gi_range.txt -g gi.lst -x "${REFSEQ_GI_DIR}/refseq_" -o copy_refseq_script -f 1
       chmod ugo+x copy_refseq_script
       ./copy_refseq_script

       seq_size=`wc ${GENE_NAME}.seq |awk '{printf("%s", $3)}'`
## run a straightforward SIM4 analysis if the gene size is small
       if test ${seq_size} -le 200000  ## a small file with less than 200kb
       then
         ${WR_FETCH_PROG} -e ./.ent -d ./.seq
         echo ">${GENE_NAME}.seq" >job.lst
         sed /$/s//\.ent/ gi.lst >>job.lst
         ${TSIM_PROG} -i job.lst -f4 -P4 -z F -y "BLASTN same_org"
         if test -s ${GENE_NAME}.ent
         then
           ASN_FILE=${GENE_NAME}.ent
           ${PRT_CHMAP_ID_PROG} -i ${ASN_FILE} -o mRNA_hit.out -k T -d "BLASTN same_org" -z F -s T -p T
           if test -s mRNA_hit.out
           then
             awk '{if($9 < 99) print $0}' mRNA_hit.out >bad_mRNA_hit.out
             if test ! -s bad_mRNA_hit.out
             then
               cut -f1 mRNA_hit.out >mRNA_hit.lst
               ${COPY_FEATURE_PROG} -i${ASN_FILE} -p${ASN_FILE} -f3 -zF
               find_mRNA=1
             else
               echo "bad mRNA match"
             fi
           fi
         fi
       fi

## for those that failed in gene annotation, run blast search
       if test ${find_mRNA} = 0
       then
         echo "check"
         if test -s local_fasta.seq
         then
           rm local_fasta.seq
         fi
         if test -s ${GENE_NAME}.ent
         then
           rm ${GENE_NAME}.ent
         fi
         for i in `cat gi.lst`; do
            ${ASN2FF} -a ${i}.ent -e T -p fasta.aa -n fasta.na
            if test -s fasta.na
            then
              cat fasta.na >>local_fasta.seq
              rm fasta.na
            fi
            if test -s fasta.aa
            then
              rm fasta.aa
            fi
         done
         if test -s local_fasta.seq
         then
           ${FORMAT_DB} -i local_fasta.seq -p F
           echo "${PREP_SEQ} -t 1 -i ${GENE_NAME}.seq -d ${CONFIG_DIR} -s `pwd`/local_db.lst  -r ${REP_FILE} -e prep_Seq.err"
           echo "local_fasta.seq" >local_db.lst
           ${PREP_SEQ} -t 1 -i ${GENE_NAME}.seq -d ${CONFIG_DIR} -s `pwd`/local_db.lst  -r ${REP_FILE} -e prep_Seq.err
           rm local_fasta.seq
         fi

         if test -s ${GENE_NAME}.ent
         then
           ${BIN_DIR}/prt_chmap_id -i ${GENE_NAME}.ent -o cDNA.out -d "BLASTN same_org" -k T
           if test ! -s cDNA.out
           then
             echo "Fail in ${BIN_DIR}/prt_chmap_id -i ${GENE_NAME}.ent -o cDNA.out"
             rm ${GENE_NAME}.ent
           else
             find_mRNA=1
           fi
         fi
       fi
     fi
   fi
  fi

## everything else failed, then run powerblast search
  if test ${find_mRNA} = 0
  then
    rm *.ent
    ${PREP_SEQ} -t 1 -i ${GENE_NAME}.seq -d ${CONFIG_DIR} -s ${DB_FILE}  -r ${REP_FILE} -e prep_Seq.err
  fi

  if test -s prep_Seq.err
  then
    echo "Error in executing ${PREP_SEQ} for ${GENE_NAME}.ent"
    exit 1
  fi

  if test ! -s ${GENE_NAME}.ent
  then
    echo "Fail to build ${GENE_NAME} file"
    exit 1
  fi
fi

TEMP_SNP_MAP_FILE=good_SNP.map.tmp  ## this file was generated by generate_TCGA_sequence
if test ! -s ${TEMP_SNP_MAP_FILE}
then
  echo "Fail to find file ${TEMP_SNP_MAP_FILE}"
  exit 1
fi

sort -u ${TEMP_SNP_MAP_FILE} >${TEMP_SNP_MAP_FILE}.sort
mv ${TEMP_SNP_MAP_FILE}.sort ${TEMP_SNP_MAP_FILE}


if test ! -s ${GSC_GENOTYPE}
then
  echo "Fail to find file ${GSC_GENOTYPE}"
  exit 1
fi

ASN_FILE=${GENE_NAME}.ent  ## produced by prep_Seq and updated by add_SNP2Seq
GENE_FASTA_FILE=${GENE_NAME}.seq  ##the fasta file retrieved from UCSC. geneName.seq
GENOTYPE_FILE=${GENE_NAME}_genotype2trace.txt

## get the chromosome start position for converting into the genomic sequence based coordinates
CHR=`grep ">" ${GENE_FASTA_FILE} | cut -f2 -d"=" |cut -f1 -d":"`
CHR_START=`grep ">" ${GENE_FASTA_FILE} | cut -f2 -d"=" | cut -f2 -d":" |cut -f1 -d"-"`
SNP_MAP_FILE=${GENE_NAME}_good_SNP.map
echo "${CVT_VARPOS} -i ${TEMP_SNP_MAP_FILE} -c ${CHR_START} -v ${GSC_GENOTYPE} -n ${GENE_NAME} -s ${ALL_SAMPLE_LIST} -o ${SNP_MAP_FILE} -g ${GENOTYPE_FILE} -t ${Valid_Tag}"
${CVT_VARPOS} -i ${TEMP_SNP_MAP_FILE} -c ${CHR_START} -v ${GSC_GENOTYPE} -n ${GENE_NAME} -s ${ALL_SAMPLE_LIST} -o ${SNP_MAP_FILE} -g ${GENOTYPE_FILE} -t ${Valid_Tag}

if test ! -s ${SNP_MAP_FILE}
then
  echo "Fail to run ${CVT_VARPOS} -i ${TEMP_SNP_MAP_FILE} -c ${CHR_START} -v ${GSC_GENOTYPE} -n ${GENE_NAME} -s ${ALL_SAMPLE_LIST} -o ${SNP_MAP_FILE} -g ${GENOTYPE_FILE} -t ${Valid_Tag}"
  exit 1
fi

## add the SNP to the genomic sequence for annotation purpose
${ADD_SNP2GENOMIC} -i ${ASN_FILE} -s ${SNP_MAP_FILE} -d "SNPName" -o ${ASN_FILE}

SNP2AA_FILE=${GENE_NAME}_SNP2AA.out ## produced by the SNP2AA program
mRNA_GI_FILE=${GENE_NAME}_mRNA.lst      ## list of the mRNA gi produced by prep_Seq
AlleleReport_FILE=${GENE_NAME}_allele_rpt.txt



## output files
SNP_PROTEIN_MAP=${GENE_NAME}_SNP2Protein_map.txt  ## mapping between SNPs and the proteins
SNP_mRNA_MAP=${GENE_NAME}_SNP2mRNA_map.txt  ## mapping between the SNPs and the mRNAs
SNP_INFO_FILE=${GENE_NAME}_snp_info.txt
SNP2Gene_FILE=${GENE_NAME}_SNP2Gene.txt
Gene2GeneID=${PROJECT_DIR}/geneName2geneID.map  ## used for creating SNP2Gene.txt file

if test -s ${SNP_PROTEIN_MAP}
then
  rm ${SNP_PROTEIN_MAP}
fi

if test -s ${SNP_mRNA_MAP}
then
  rm ${SNP_mRNA_MAP}
fi

if test -s ${SNP_INFO_FILE}
then
  rm ${SNP_INFO_FILE}
fi

if test -s ${SNP2Gene_FILE}
then
  rm ${SNP2Gene_FILE}
fi

## print out the mRNA hits. This file was generated from prep_Seq_script
## the mRNA_hit.lst file was produced by prep_Seq_script
if test ! -s mRNA_hit.lst
then
  echo "Fail to find mRNA hit"
  exit 1
fi

if test -s ${mRNA_GI_FILE}
then
  rm ${mRNA_GI_FILE}
fi


## Copy the *.ent from pre-existing dir
COPY_ENT_SCRIPT=${PERLSRC}/create_ent_dir4gi.pl

## REFSEQ_GI_DIR=/nfs_exports/linux-file1/home/naevegrp/jzhang2/NextGen/RefSeq

${COPY_ENT_SCRIPT} -i ${REFSEQ_GI_DIR}/refseq_gi_range.txt -g mRNA_hit.lst -x "${REFSEQ_GI_DIR}/refseq_" -o copy_refseq_script -f 1
chmod ugo+x copy_refseq_script
./copy_refseq_script


## print out the mRNA based coordiantes
${WR_FETCH_PROG} -e ./.ent
if test -s SNP2AA_from_mRNA.out
then
  rm SNP2AA_from_mRNA.out
fi
touch SNP2AA_from_mRNA.out

if test -s ${AlleleReport_FILE}
then
  rm ${AlleleReport_FILE}
fi

## this value was determined by cDNA.out
VALIDATION_FILE=${GENE_NAME}_validation.txt
## example of the valid code. not deal with that for now
## ProjectName     SNPname SampleName      Validation
## COSMIC_GBM      c.376-1G>A_21572        906746  Valid
## COSMIC_GBM      R110P_11250     908144  Valid
## COSMIC_GBM      F113C_10717     909729  Valid
## COSMIC_GBM      F113V_11498     909905  Valid
## COSMIC_GBM      A159V_11148     908145  Valid
## COSMIC_GBM      R175H_10648     946368  Valid

## get the orientation of the mRNAs based on the genomic to mRNA alignment
## also sort from the longest to the shortest mRNA
${BIN_DIR}/prt_chmap_id -i ${GENE_NAME}.ent -o mRNA_align.out -k T -d "BLASTN same_org" -z F -s T
if test -s mRNA_align.out
then
  awk '{printf("%s\t%ld\n", $1, $3-$2+1)}' mRNA_align.out |sort +1 -2 -n -r |cut -f1>mRNA_hit.lst.sorted
  mv mRNA_hit.lst.sorted ${mRNA_GI_FILE}
fi

if test ! -s ${mRNA_GI_FILE}
then
  echo "Error in ${BIN_DIR}/prt_chmap_id -i ${GENE_NAME}.ent -o mRNA_align.out -k T -d "BLASTN same_org" -z F -s T"
  echo "Fail to create ${mRNA_GI_FILE}"
  exit 1
fi

rev_strand=F
if test -s ${CDS_GI_ACC_MAPPING}
then
  rm ${CDS_GI_ACC_MAPPING}
fi

## adding additional information about genotype_label and the SNP2Protein label
for i in `cat ${mRNA_GI_FILE}`; do
  echo $i > t.lst
  ${FIND_SUB} -i mRNA_align.out -c t.lst -t 1 -d '\t' -n 0 -o t.lst.out
  if test -s t.lst.out
  then
    rev_strand=`head -n1 t.lst.out |awk '{if(index($4, "-") == 1) printf("T"); else printf("F")}'`
  fi
  echo ">$i" >job.lst
  echo ${ASN_FILE} >>job.lst
  ${TSIM_PROG} -i job.lst -f4 -P4 -zF -y "BLASTN same_org"

  if test -s ${i}.ent
  then
    ${BIN_DIR}/prt_chmap_id -i ${i}.ent -o cDNA.out -d "BLASTN same_org" -k T
    if test ! -s cDNA.out
    then
      echo "Fail in ${BIN_DIR}/prt_chmap_id -i ${i}.ent -o cDNA.out"
      rm ${i}.ent
    else
      LENGTH=`grep ${GENE_NAME} cDNA.out |head -n1 |cut -f8`
      PERCENT=`grep ${GENE_NAME} cDNA.out |head -n1 |cut -f9`
      ${BUILD_PROTEIN_GI_MAP} -i ${i}.ent -o  ${CDS_GI_ACC_MAPPING}.tmp
      if test -s ${CDS_GI_ACC_MAPPING}.tmp
      then
        cat ${CDS_GI_ACC_MAPPING}.tmp >>${CDS_GI_ACC_MAPPING}
      fi
      rm ${CDS_GI_ACC_MAPPING}.tmp

      if test ${PERCENT} -le 95
      then
        echo "The alignment identity ${PERCENT} for ${GENE_NAME} is below the minimum 95% threshld"
        ${DEL_ALIGN_PROG} -i ${i}.ent -o ${i}.ent -d 1 -a T
        ${ATTATCH_ENT} -t ${i}.ent -a ${ASN_FILE} -o ${i}.ent -l "BLASTN same_org" -c T  -n "BLASTN same_org"
      fi
    fi
  fi

## fail to produce the alignment directly from tsim. Use the alignment stored in the 
## gene.ent file
  if test ! -s ${i}.ent
  then
      ${ATTATCH_ENT} -t ${i}.ent -a ${ASN_FILE} -o ${i}.ent -l "BLASTN same_org" -c T  -n "BLASTN same_org"
  fi

  if test -s ${i}.ent
  then
    ${BIN_DIR}/prt_chmap_id -i ${i}.ent -o cDNA.out -d "BLASTN same_org" -k T
    if test ! -s cDNA.out
     then
       echo "Fail in ${BIN_DIR}/prt_chmap_id -i ${i}.ent -o cDNA.out"
       rm ${i}.ent
     else
       LENGTH=`grep ${GENE_NAME} cDNA.out |head -n1 |cut -f8`
       PERCENT=`grep ${GENE_NAME} cDNA.out |head -n1 |cut -f9`
       if test ${PERCENT} -le 95
       then
         echo "The alignment identity ${PERCENT} for ${GENE_NAME} is below the minimum 95% threshld"
         rm ${i}.ent
       fi
     fi
  fi

  if test -s ${i}.ent
  then
## delete the SNPs that are annotated on the RefSeq file
    ${DEL_SNP_PROG} -i ${i}.ent -o ${i}.ent -d 1
    if test -s report.out
    then
      rm report.out
    fi
## copy the SNPs from the genomic to the mRNA sequence. do not recover the indels that failed to map by setting -n F. set -n T for COSMIC
    ${COPY_FEATURE_PROG} -i ${i}.ent -p ${i}.ent -f 8 -r report.out -m F -zF -y F -d T  -a "BLASTN same_org" -n F
    if test -s report.out
    then
      echo "${SNP2AA_PROG} -i ${i}.ent -o xxx -p T  -q ${rev_strand} -r allele_report.txt"
      ${SNP2AA_PROG} -i ${i}.ent -o xxx -p T  -q ${rev_strand} -r allele_report.txt
      if test -s xxx
      then 
        ${STRIP_LINE_PROG} -i xxx -o stdout |grep -v unknown>>SNP2AA_from_mRNA.out
      fi

      if test -s allele_report.txt
      then
        cut -f1 SNP2AA_from_mRNA.out |sort -u >kkk
        ${FIND_SUB} -i allele_report.txt -c kkk -t 1 -d '\t' -n 0 -o kkk.out
        head -n1 allele_report.txt >kkk2
        if test -s kkk.out
        then
          cat kkk.out >>kkk2
        fi
        mv kkk2 allele_report.txt
        rm kkk.out
      fi
      if test -s allele_report.txt
      then
        grep -v SNPName allele_report.txt >kkk 
        if test -s kkk
        then
          if test -s ${AlleleReport_FILE}
          then
            cut -f1 ${AlleleReport_FILE} |sort -u >existing_snp.lst
            ${FIND_SUB} -i kkk -c existing_snp.lst -t 0 -d '\t' -n 0 -o kkk.clean
            if test -s kkk.clean
            then
              cat kkk >>${AlleleReport_FILE}
            fi
          else
            cp allele_report.txt ${AlleleReport_FILE}
          fi
        fi 
      fi


      strand=`$PRT_CHMAP_ID_PROG -i ${i}.ent -o stdout -d "BLASTN same_org" | grep ^${GENE_NAME}|cut -f4 |sort -u`
      grep accession ${i}.ent | grep NM >NM.lst
      if test ! -s NM.lst
      then
        grep accession ${i}.ent | grep XM >NM.lst
        acc_tag=XM
      else
        acc_tag=NM
      fi

      if test ! -s NM.lst
      then
        grep accession ${i}.ent | grep AY830839>NM.lst
        if test -s NM.lst
        then
          acc_tag=AY830839
        fi
      fi
      if test ! -s NM.lst
      then
        echo "Fail to find accession for ${i}.ent"
      else
        acc=`grep accession ${i}.ent | grep $acc_tag|awk '{printf("%s\n", $2)} ' | sed /\"/s///g`
        ${STRIP_LINE_PROG} -i report.out -o stdout | sed /SNPName\|/s//${i}"	"$strand"	"$acc"	"/g >x
        if test -s x
        then
          if test ! -s ${SNP_mRNA_MAP}
          then
            echo "SNPName	SeqType	SeqID	SeqStart	SeqStop	SeqName	Orientatio" >${SNP_mRNA_MAP}
          fi
          awk '{printf("%s\tmRNA\t%s\t%ld\t%ld\t%s\t%s\n", $8, $5, $1, $1, $7, $6)}' x>>${SNP_mRNA_MAP}
        fi
      fi
    fi
  fi
done

if test ! -s ${SNP_mRNA_MAP}
then
  echo "No SNP maps to the mRNA for gene $GENE_NAME"
fi

if test -s ${SNP2AA_FILE}
then
  rm ${SNP2AA_FILE}
fi

## print out the 1-based coordinates
## ${SNP2AA_PROG} -i ${ASN_FILE} -o ${SNP2AA_FILE} -p T -p T -q ${rev_strand} -r allele_report.txt
${SNP2AA_PROG} -i ${ASN_FILE} -o ${SNP2AA_FILE} -p T -p T -q F -r allele_report.txt -s ${CDS_GI_ACC_MAPPING}
if test -s ${SNP2AA_FILE}
then
  if test -s SNP2AA_from_mRNA.out
  then
    cut -f1 SNP2AA_from_mRNA.out >xxx.lst
    ${FIND_SUB} -i ${SNP2AA_FILE} -c xxx.lst -d '\t' -t 0 -n 0 -o ${SNP2AA_FILE}.clean
    sort SNP2AA_from_mRNA.out >>${SNP2AA_FILE}.clean
    mv ${SNP2AA_FILE}.clean ${SNP2AA_FILE}
  fi

  if test -s allele_report.txt
  then
    if test -s ${AlleleReport_FILE}
    then
      cut -f1 ${AlleleReport_FILE} |sort -u >xxx.lst
      ${FIND_SUB} -i allele_report.txt -c xxx.lst -d '\t' -t 0 -n 0 -o allele_report.txt.clean
      mv allele_report.txt.clean allele_report.txt
    fi
  fi

  if test -s allele_report.txt
  then
    if test ! -s ${AlleleReport_FILE}
    then
      cp allele_report.txt ${AlleleReport_FILE}
    else
      grep -v SNPName allele_report.txt >kkk
      if test -s kkk
      then
        cat kkk >>${AlleleReport_FILE}
      fi
    fi
  fi


  ${STRIP_LINE_PROG} -i ${SNP2AA_FILE} -o stdout |awk '{if($7 > 0) printf("%s\tProtein\t%ld\t%ld\t%ld\t%s\t%s\t%s\t%s\t%s\t%s\n", $1, $7, $9, $9, $7, $8, $11, $10, $(NF-1), $NF)}' >x
  if test -s x
  then
    echo "SNPName	SeqType	SeqID	SeqStart	SeqStop	SeqName	Orientation	Codon	Frame	AAChangeLabel	AAChangeFlanking" >${SNP_PROTEIN_MAP}
    cat x >>${SNP_PROTEIN_MAP}
  fi
else
  echo "Fail to produce SNP annotation file ${SNP2AA_FILE} for $GENE_NAME"
fi
if test ! -s ${SNP_PROTEIN_MAP}
then
  echo "No cSNP in gene ${GENE_NAME}"
fi

if test -s ${AlleleReport_FILE}
then
  grep Unknown ${AlleleReport_FILE} > ${AlleleReport_FILE}.unknown
  if test -s ${AlleleReport_FILE}.unknown
  then
    if test -s mRNA_align.out
    then
      mRNA_count=`wc mRNA_align.out |awk '{printf("%s", $1)}'`
      if test ${mRNA_count} = 1
      then
        mRNA_gi=`cut -f1 mRNA_align.out`
        if test -s ${mRNA_gi}.ent  ## try to extract the accession, which starts with N from the ent file
        then
          grep "accession \"N" ${mRNA_gi}.ent  |awk '{printf("%s\n", $2)}' |cut -f2 -d "\"" >acc.lst
          if test -s acc.lst
          then
            acc_count=`wc acc.lst |awk '{printf("%s", $1)}'`
            if test ${acc_count} = 1
            then
              acc_num=`awk '{printf("%s", $1)}' acc.lst`
              grep -v Unknown ${AlleleReport_FILE} > ${AlleleReport_FILE}.clean
              sed /Unknown/s//${acc_num}/g ${AlleleReport_FILE}.unknown >>${AlleleReport_FILE}.clean
              mv ${AlleleReport_FILE}.clean ${AlleleReport_FILE}
            fi
          fi
          rm acc.lst
        fi
      fi
    fi
  fi
  rm ${AlleleReport_FILE}.unknown
fi


## produce the *_snp_info.txt file
if test -s ${SNP_INFO_FILE}
then
  rm ${SNP_INFO_FILE}
fi
echo "SNPName	chrom	chromPos	GenomicPos	Class	SNP_content" >${SNP_INFO_FILE}
${STRIP_LINE_PROG} -i ${SNP_MAP_FILE} -o stdout |cut -f1,2,3,4,6 | sort +0 -1 > x
## extract the highest SNP rank from the SNP2AA.out file
${FindBestSNPClass} -i ${SNP2AA_FILE} -o snp_class.out
sort +0 -1 snp_class.out >snp_class.out.sort
join x snp_class.out.sort | awk '{printf("%s\t%s\t%s\t%s\t%s\t%s\n", $1, $2, $3, $4, $6, $5)}' | sort -n +2 -3 >>${SNP_INFO_FILE}

## produce the LKB1_SNP2Gene.txt
if test -s ${SNP2Gene_FILE}
then
  rm ${SNP2Gene_FILE}
fi

if test ! -s ${Gene2GeneID}
then
  echo "Fail to find the file that shows the genename to gene ID mapping: ${Gene2GeneID}"
  exit 1
fi
${BuildSNP2Gene} -i ${SNP_INFO_FILE} -m ${Gene2GeneID} -g ${GENE_NAME} -o ${SNP2Gene_FILE}
if test ! -s ${SNP2Gene_FILE}
then
  echo "Fail to produce the file SNP2Gene ${SNP2Gene_FILE}"
  exit 1
fi

if test -s ${AlleleReport_FILE}
then
  ${ADD_GENOTYPE_LABEL} -i ${SNP_INFO_FILE} -j ${AlleleReport_FILE} -k ${GENOTYPE_FILE} -o ${GENOTYPE_FILE}.mod
  if test -s ${GENOTYPE_FILE}.mod
  then
    mv ${GENOTYPE_FILE} ${GENOTYPE_FILE}.original
    mv ${GENOTYPE_FILE}.mod ${GENOTYPE_FILE}
  fi
fi

